networks:
  net:
    external: false
    name: ${NETWORK}

volumes:
  letsencrypt:
  traefik:
  wg-easy:


services:
  wg-easy:
    labels:
      # traefik
      - "traefik.enable=true"
      - "traefik.http.services.WireGuardService.loadbalancer.server.port=${PORT}"
      # http to https
      - "traefik.http.routers.WireGuardRoute.service=WireGuardService"
      # ⚠️ Required:
      # Change this to your host's public address
      - "traefik.http.routers.WireGuardRoute.rule=Host(`${WG_HOST}`)"
      - "traefik.http.routers.WireGuardRoute.entrypoints=http"
      # - "traefik.http.routers.WireGuardRoute.middlewares=HttpToHttpsRedirectMiddleware"
      # https
      - "traefik.http.routers.WireGuardRouteSSL.service=WireGuardService"
      # ⚠️ Required:
      # Change this to your host's public address
      - "traefik.http.routers.WireGuardRouteSSL.rule=Host(`${WG_HOST}`)"
      - "traefik.http.routers.WireGuardRouteSSL.entrypoints=https"
      - "traefik.http.routers.WireGuardRouteSSL.tls.certresolver=letsencrypt"
    env_file:
      - .env
    image: ghcr.io/wg-easy/wg-easy
    container_name: wg-easy
    networks:
      - net
    volumes:
      - ./wg-easy:/etc/wireguard
    ports:
      - "${WG_PORT}:${WG_PORT}/udp"
    expose:
      - "${PORT}:${PORT}/tcp"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1

  traefik:
    image: traefik:latest
    container_name: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - ./letsencrypt:/letsencrypt
    networks:
      - net
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"